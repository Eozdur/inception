server {
    # bu ifade nginx'in 443 noktasından gelen istekleri dinlenmesi gerektiğini ifade eder.
    # SSL/TLS şifrelemesi iletişimi şifremelek ve güvenli hale gelmesi için kullanılır.
    # eğer listek 433 olsa şifreleme olmaz ve güvenli olmaz.
    listen 443 ssl; 
    # ıpv6 için kullanılır.
    listen [::]:443 ssl;
    # bu ifade gelen isteklerin hangi alan adına veya ana bilgisayar adına göre eşleştireceğini belirtir.
    server_name $DOMAIN_NAME;
    # bu ifade ssl sertifikasının ve anahtarının nerede olduğunu belirtir.
    ssl_certificate $CERTIFICICATES_OUT;
    ssl_certificate_key $CERTIFICICATES_KEYOUT;
    # bu ifade ssl protokolünü belirtir.
    ssl_protocols TLSv1.3;
    # root nginx sunucusunun istemcilere servis edeceğini dosyalarının kök dizinini belirtir.
    # istemci tarafından yapılan isteklere göre nginx sunucusu bu dizindeki dosyaları servis eder.
    #istemci nginx sunucusuna bir istekte bulunduğunda, var/www/html dizinindeki dosyaları servis eder.
    root /var/www/html;
    # 'index index.html' ifadesi, Nginx sunucusunun kök dizininde(root) bir istemci(web tarayıcısı) web sitesine istek yaptığında hangi dosyayı varsayılan olarak göstereceğini belirtir.
	# 'index.html', varsayılan olarak gösterilecek olan dosya adını belirtir.
	#	Yani, istemci bir klasörün içine istek yaptığında ve o klasörde 'index.html' dosyası varsa, Nginx bu dosyayı gösterecektir.
	#	Örneğin, eğer bir istemci 'server_name' direktifindeki adresine(gsever.42.fr) istek yaparsa, Nginx kök dizinindeki 'index.html' dosyasını gösterecektir.
	# Bu yapılandırma, özellikle basit statik web sitelerinde yaygın olarak kullanılır.
	# Eğer farklı bir varsayılan dosya adı kullanmak istenirse, 'index' direktifine farklı dosya adı eklenerek belirtilir.
	#	Örneğin, 'index index.php index.html;' şeklinde belirtilirse, Nginx önce 'index.php' dosyasını arayacak, eğer bulamazsa 'index.html' dosyasını gösterecektir.	
	#index index.html;
	#	Ancak biz WordPress ve PHP-FPM kullanacağımızdan dolayı '.php' uzantılı dosyaları kullanmamız gerekecektir.
	#		WordPress, PHP tabanlı bir içerik yönetim sistemidir ve PHP betiklerini kullanarak içeriği oluşturur ve işler.
	#		Bu nedenle, WordPress'in düzgün çalışması için '.php' dosyalarının kullanılması gerekmektedir.
	#	WordPress teması ve eklentileri '.php' uzantılı dosyalar içerir  ve bu dosyaların Nginx tarafından doğru şekilde işlenmesi ve sunulması için 'index index.php;' şeklinde bir yapı kullanmanız gerekecektir.
    #. Örneğin, eğer bir kullanıcı "http://www.example.com/" adresine erişirse, sunucu otomatik olarak "http://www.example.com/index.php" dosyasını sunar.
    index index.php;
    # location / bloğı nginx sunucusuna gelen tüm istekleri karşılar.

    location / {
    # eğer istemci tarafından yapılan istek bir dosya veya klasörde bulunmuyorsa, bu blok çalışır.
        try_files $uri $uri/ =404; #404 hatası döndürür.
    }
    # location ~ \.php$ bloğu, nginx sunucusuna gelen .php uzantılı dosya isteklerini karşılar.
    # ~ ifadesi, regex(Regular Expression) ifadesi, yani düzenli ifade ifadesi anlamına gelir.
    # \.php$ ifadesi, .php uzantılı dosyaları karşılar.
    # $ ifadesi, satır sonu ifadesi anlamına gelir.
    location ~ \.php$ {
        #bu satır fastcgi-php.conf dosyasını dahil eder.
        include snippets/fastcgi-php.conf;
        #fastcgi_pass ifadesi, PHP-FPM sunucusunun adresini ve portunu belirtir.
        fastcgi_pass $MYSQL_DATABASE_NAME:9000;
        #bir bağlantı kurulmadan önce maksimum bekleme süresini belirtir.
        proxy_connect_timeout 300s;
        #bir istemcinin bir isteğe yanıt vermesi için maksimum süreyi belirtir.
        proxy_send_timeout 300s;
        #bir istemcinin bir yanıtı okuması için maksimum süreyi belirtir.
        proxy_read_timeout 300s;
        #bir istemcinin bir yanıtı okuması için maksimum süreyi belirtir.
        fastcgi_send_timeout 300s;
        #bir istemcinin bir yanıtı okuması için maksimum süreyi belirtir.
        fastcgi_read_timeout 300s;
    }
}